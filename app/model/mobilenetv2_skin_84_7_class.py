# -*- coding: utf-8 -*-
"""mobilenetv2-skin-84-7-class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jXwFsWsfYg6MYHl5wOxFNqXt2sQ_f16W
"""

import os
for dirname, _, filenames in os.walk('/root/notebooks'):
    for filename in filenames:
        os.path.join(dirname, filename)

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import numpy as np
import keras
import warnings
warnings.filterwarnings(action="ignore")
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import SparseCategoricalCrossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import TensorBoard,EarlyStopping

import sklearn.metrics as metrics
from keras.callbacks import LearningRateScheduler
from tensorflow.keras.preprocessing.image import ImageDataGenerator
annealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x, verbose=0)

Eczema_dir = r'/root/notebooks/IMG_CLASSES/1. Eczema 1677'
Warts_Molluscum_and_other_Viral_Infections_dir = r'/root/notebooks/IMG_CLASSES/10. Warts Molluscum and other Viral Infections - 2103'

Atopic_Dermatitis_dir = r'/root/notebooks/IMG_CLASSES/3. Atopic Dermatitis - 1.25k'
Melanocytic_Nevi_dir = r'/root/notebooks/IMG_CLASSES/5. Melanocytic Nevi (NV) - 7970'
Psoriasis_pictures_Lichen_Planus_and_related_diseases_dir = r'/root/notebooks/IMG_CLASSES/7. Psoriasis pictures Lichen Planus and related diseases - 2k'
Seborrheic_Keratoses_and_other_Benign_Tumors_dir = r'/root/notebooks/IMG_CLASSES/8. Seborrheic Keratoses and other Benign Tumors - 1.8k'
Tinea_Ringworm_Candidiasis_and_other_Fungal_Infections_dir = r'/root/notebooks/IMG_CLASSES/9. Tinea Ringworm Candidiasis and other Fungal Infections - 1.7k'

filepaths = []
labels = []
dict_list = [Eczema_dir, Warts_Molluscum_and_other_Viral_Infections_dir, Atopic_Dermatitis_dir, Melanocytic_Nevi_dir,Psoriasis_pictures_Lichen_Planus_and_related_diseases_dir ,Seborrheic_Keratoses_and_other_Benign_Tumors_dir ,Tinea_Ringworm_Candidiasis_and_other_Fungal_Infections_dir]
class_labels = ['Eczema', 'Warts Molluscum and other Viral Infections', 'Atopic Dermatitis','Melanocytic Nevi', 'Psoriasis pictures Lichen Planus and related diseases', 'Seborrheic Keratoses and other Benign Tumors','Tinea Ringworm Candidiasis and other Fungal Infections']

for i, j in enumerate(dict_list):
    flist = os.listdir(j)
    for f in flist:
        fpath = os.path.join(j, f)
        filepaths.append(fpath)
        labels.append(class_labels[i])

Fseries = pd.Series(filepaths, name="filepaths")
Lseries = pd.Series(labels, name="labels")
skin_data = pd.concat([Fseries, Lseries], axis=1)
skin_df = pd.DataFrame(skin_data)
print(skin_df.head())
print(skin_df["labels"].value_counts())

print(skin_df.shape)

train_images, test_images = train_test_split(skin_df, test_size=0.3, random_state=42)
train_set, val_set = train_test_split(skin_df, test_size=0.2, random_state=42)

print(train_set.shape)
print(test_images.shape)
print(val_set.shape)
print(train_images.shape)

image_gen = ImageDataGenerator(preprocessing_function= tf.keras.applications.mobilenet_v2.preprocess_input)
train = image_gen.flow_from_dataframe(dataframe= train_set,x_col="filepaths",y_col="labels",
                                      target_size=(244,244),
                                      color_mode='rgb',
                                      class_mode="categorical", #used for Sequential Model
                                      batch_size=32,
                                      shuffle=False            #do not shuffle data
                                     )
test = image_gen.flow_from_dataframe(dataframe= test_images,x_col="filepaths", y_col="labels",
                                     target_size=(244,244),
                                     color_mode='rgb',
                                     class_mode="categorical",
                                     batch_size=32,
                                     shuffle= False
                                    )
val = image_gen.flow_from_dataframe(dataframe= val_set,x_col="filepaths", y_col="labels",
                                    target_size=(244,244),
                                    color_mode= 'rgb',
                                    class_mode="categorical",
                                    batch_size=32,
                                    shuffle=False
                                   )

classes=list(train.class_indices.keys())
print (classes)

def show_Skin_images(image_gen):
    test_dict = test.class_indices
    classes = list(test_dict.keys())
    images, labels=next(image_gen) # get a sample batch from the generator
    plt.figure(figsize=(20,20))
    length = len(labels)
    if length<25:
        r=length
    else:
        r=25
    for i in range(r):
        plt.subplot(5,5,i+1)
        image=(images[i]+1)/2 #scale images between 0 and 1
        plt.imshow(image)
        index=np.argmax(labels[i])
        class_name=classes[index]
        plt.title(class_name, color="green",fontsize=16)
        plt.axis('off')
    plt.show()
show_Skin_images(train)

num_classes = len(classes)

from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping

# Load the MobileNetV2 model pre-trained on ImageNet
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(244, 244, 3))

# Freeze the base model layers
for layer in base_model.layers:
    layer.trainable = False

# Build a new model on top of the pre-trained base
def build_transfer_learning_model(num_classes):
    model = Sequential([
        base_model,
        GlobalAveragePooling2D(),
        Dense(512, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')
    ])

    model.compile(optimizer=Adam(learning_rate=0.001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

    return model

# Build the transfer learning model
transfer_learning_model = build_transfer_learning_model(num_classes)

# Learning rate schedule callback
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-6)

# Train the model
history_transfer_learning = transfer_learning_model.fit(train, epochs=15, validation_data=val, callbacks=[reduce_lr])

# Evaluate on the test set
test_loss, test_accuracy = transfer_learning_model.evaluate(test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

transfer_learning_model.summary()
plt.plot(history_transfer_learning.history['accuracy'], label='Training Accuracy')
plt.plot(history_transfer_learning.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

from keras.utils import plot_model
plot_model(transfer_learning_model, to_file='transfer_learning_model_plot.png', show_shapes=True, show_layer_names=True)

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
pred2 = transfer_learning_model.predict(test)
y_pred = np.argmax(pred2, axis=1)
y_true = test.labels
print(classification_report(y_true, y_pred))
accuracy = accuracy_score(y_true, y_pred) * 100
print("Accuracy of the Model: {:.1f}%".format(accuracy))

plt.plot(history_transfer_learning.history['loss'])
plt.plot(history_transfer_learning.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Training', 'Validation'], loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

class_labels = ['Eczema', 'Warts Molluscum and other Viral Infections', 'Atopic Dermatitis', 'Melanocytic Nevi', 'Psoriasis pictures Lichen Planus and related diseases', 'Seborrheic Keratoses and other Benign Tumors','Tinea Ringworm Candidiasis and other Fungal Infections']

cm = confusion_matrix(y_true, y_pred)

plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues')

# Set ticks at the center of each class
tick_positions = [i + 0.5 for i in range(len(class_labels))]
plt.xticks(ticks=tick_positions, labels=class_labels, rotation=45)
plt.yticks(ticks=tick_positions, labels=class_labels, rotation=0)

plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")

plt.show()

transfer_learning_model.save("SKIN Diseases.h5")

